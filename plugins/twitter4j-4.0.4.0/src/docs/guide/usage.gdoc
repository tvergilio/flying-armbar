h1. Configuration

h2. Enable your application in twitter.
Log into your twitter account (eg. [http://www.twitter.com/yourname]) and then go to [https://dev.twitter.com/apps/new] to register your app.

Select your application type as "Client"

Make a note of your API Key and API Secret, you will need it shortly


h2. Getting your requestToken from Twitter

Start by enabling the Twitter4J controller
{code}
twitter4j.enableTwitter4jController = true
{code}

Then run your app, and goto @http://localhost:8080/yourApp/twitter4j@ - enter the API Key and API Secret
and click "Request token"

Click the link on the next screen, and follow the instructions to obtain your PIN. Enter the pin-code and click "Verify pin"

Paste the configuration code into your @Config.groovy@ file. The app should reload your configuration, if not restart the app.


h2. Test if it works
Goto @http://localhost:8080/yourApp/twitter4j/status@ and enter a twitter-message.
If it works, you should be able to see your update on your twitter page: http://www.twitter.com/yourname


h2. Examples
The following are some simple examples to give you a feel for the plugin.


h3. Sending a twitter update
In a controller or service
{code}
class SomeController {
    def twitter4jService

    def someAction = {
        twitter4jService.updateStatus("This is a status-update from twitter")
    }
}
{code}


h3. Getting your own latest updates
{code}
class SomeController {
    def twitter4jService

    def someAction = {
        def updates = twitter4jService.getUserTimeline() // of type ResponseList<Status>
        [statusUpdates: updates]
    }
}
{code}


h3. More than one twitter-account?
Alter your configuration to:
{code}
twitter4j {
    enableTwitter4jController = false
    'default' {
        OAuthConsumerKey = '******'
        OAuthConsumerSecret = '************'
        OAuthAccessToken = '************'
        OAuthAccessTokenSecret = '************'
    }
    'otherAccount' {
        OAuthConsumerKey = '******'
        OAuthConsumerSecret = '************'
        OAuthAccessToken = '************'
        OAuthAccessTokenSecret = '************'
    }
}
{code}
The plugin will automatically configure the bean @twitter4jService@ if the @default@  configuration is found.
If you need additional accounts configured, for example with @otherAccount@ as defined above,
you need to add an additional bean in @grails-app/conf/spring/resources.groovy@ like this:
{code}
otherAccount(Twitter4jFactoryBean) {
    configuration = Holders.config.otherAccount
}
{code}
h2. Where to get more information.

Look at the documentation found on the [Twitter4j homepage|http://twitter4j.org]